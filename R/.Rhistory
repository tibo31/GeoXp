xSeq <- data.frame(cbind("var2" = rep(0, 1e3),
"var1" = seq(min(var1), max(var1),
length.out = 1e3)))
pred <- predict(fit, newdata = xSeq)
#fitmax  <- rqss(var2 ~ qss(var1, constraint= "CD", lambda = etendue),
#                tau = alpha1, data = temp_data, control = sfn.control(warn.mesg = FALSE))
lines(xSeq$var1, pred$fit, col = "blue")
se=TRUE
pred <- predict(fit, newdata = xSeq, se=TRUE)
#fitmax  <- rqss(var2 ~ qss(var1, constraint= "CD", lambda = etendue),
#                tau = alpha1, data = temp_data, control = sfn.control(warn.mesg = FALSE))
lines(xSeq$var1, pred$fit, col = "blue")
?qgam
library(GeoXp)
?scattermap
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
## Not run:
?qgam
library(GeoXp)
?scattermap
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
library(GeoXp)
# data on price indices of real estate in France
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
temp_data <- data.frame(
var1 = sort(var1),
var2 = var2[order(var1)])
fit <- qgam(var2 ~ s(var1, k = 20, bs = "ad"), data = temp_data, qu = alpha)
?qgam
library(qgam); library(MASS)
# Fit for quantile 0.5 using the best sigma
set.seed(6436)
fit <- qgam(accel~s(times, k=20, bs="ad"), data = mcycle, qu = 0.5)
xSeq <- data.frame(cbind("accel" = rep(0, 1e3), "times" = seq(2, 58, length.out = 1e3)))
pred <- predict(fit, newdata = xSeq, se=TRUE)
library(GeoXp)
?scattermap
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
library(GeoXp)
######
# data on price indices of real estate in France
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
library(GeoXp)
?scattermap
######
# data on price indices of real estate in France
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
library(GeoXp)
######
# data on price indices of real estate in France
data(immob)
row.names(immob) <- immob$Nom
# immob is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
immob.sp <- SpatialPoints(cbind(immob$longitude, immob$latitude))
# ... and then by integrating other variables to create SpatialPointsDataFrame
immob.spdf <- SpatialPointsDataFrame(immob.sp, immob)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
midiP <- readOGR(system.file("shapes/region.shp", package="GeoXp")[1])
cont_midiP <- spdf2list(midiP[-c(22, 23), ])$poly
# a example of use
scattermap(immob.spdf, c("prix.vente", "prix.location"),
carte = cont_midiP, xlab = "Average sell price", ylab = "Average rent price",
identify = TRUE, cex.lab = 0.6)
qgam
require(qgam)
qgam
library(GeoXp)
?angleplotmap
data(afcon)
# afcon is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
afcon.sp <- SpatialPoints(cbind(afcon$x, afcon$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
afcon.spdf <- SpatialPointsDataFrame(afcon.sp, afcon)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
africa <- readOGR(system.file("shapes/Africa.shp", package = "GeoXp")[1])
africa.contour <- spdf2list(africa)$poly
# A basic call of histomap function
angleplotmap(afcon.spdf, "totcon", carte = africa.contour,
identify = TRUE, cex.lab = 0.6)
require(GeoXp)
data(afcon)
# afcon is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
afcon.sp <- SpatialPoints(cbind(afcon$x, afcon$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
afcon.spdf <- SpatialPointsDataFrame(afcon.sp, afcon)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
africa <- readOGR(system.file("shapes/Africa.shp", package = "GeoXp")[1])
africa.contour <- spdf2list(africa)$poly
# A basic call of histomap function
angleplotmap(afcon.spdf, "totcon", carte = africa.contour,
identify = TRUE, cex.lab = 0.6)
library(GeoXp)
data(afcon)
# afcon is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
afcon.sp <- SpatialPoints(cbind(afcon$x, afcon$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
afcon.spdf <- SpatialPointsDataFrame(afcon.sp, afcon)
# For more details, see vignette('sp', package="sp")
# optional : we add some contours that don't correspond to the spatial unit
# but are nice for mapping
require("rgdal")
africa <- readOGR(system.file("shapes/Africa.shp", package = "GeoXp")[1])
africa.contour <- spdf2list(africa)$poly
# A basic call of histomap function
angleplotmap(afcon.spdf, "totcon", carte = africa.contour,
identify = TRUE, cex.lab = 0.6)
?variocloudmap
data(meuse)
# meuse is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
meuse.sp <- SpatialPoints(cbind(meuse$x,meuse$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# meuse.riv is used for contour plot
data(meuse.riv)
# example of use of variocloudmap
variocloudmap(meuse.spdf, "zinc", quantiles = TRUE, bin = seq(0, 2000, 100),
xlim = c(0, 2000), ylim = c(0, 500000), pch = 2, carte = meuse.riv[c(21:65, 110:153), ],
criteria = (meuse$lime == 1))
data(meuse)
# meuse is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
meuse.sp <- SpatialPoints(cbind(meuse$x,meuse$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# meuse.riv is used for contour plot
data(meuse.riv)
# example of use of variocloudmap
variocloudmap(meuse.spdf, "zinc", quantiles = TRUE, bin = seq(0, 2000, 100),
xlim = c(0, 2000), ylim = c(0, 500000), pch = 2, carte = meuse.riv[c(21:65, 110:153), ],
criteria = (meuse$lime == 1))
library(GeoXp)
#####
# Data Meuse
data(meuse)
# meuse is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
meuse.sp <- SpatialPoints(cbind(meuse$x,meuse$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# meuse.riv is used for contour plot
data(meuse.riv)
# example of use of variocloudmap
variocloudmap(meuse.spdf, "zinc", quantiles = TRUE, bin = seq(0, 2000, 100),
xlim = c(0, 2000), ylim = c(0, 500000), pch = 2, carte = meuse.riv[c(21:65, 110:153), ],
criteria = (meuse$lime == 1))
?pcamap
# data boston
data(boston)
# SpatialPoints object
boston.sp <- SpatialPoints(cbind(boston.utm[, 1], boston.utm[, 2]))
# SpatialPointsDataFrame object
boston.spdf <- SpatialPointsDataFrame(boston.sp, boston.c)
# a basic PCA on 7 variables
pcamap(boston.spdf, c(7:8, 10, 12:15), identify = TRUE, cex.lab = 0.5)
?mvariocloudmap
## data meuse
data(meuse)
# transformation of explanatory variables
meuse[, 3:7] <- log(1 + meuse[, 3:7])
# creation of a Spatial Points object
meuse.sp <- SpatialPoints(cbind(meuse$x, meuse$y))
# creation of a SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# for the spatial contours
data(meuse.riv)
# Spatial Weight matrix based on the 7th nearest neighbours
meuse.knn <- knearneigh(meuse.sp, k = 7)
meuse.nb <- knn2nb(meuse.knn)
# example of use of mvariocloudmap. The statistic are calculated by taking
# into account variables cadmium,copper,lead,zinc,elev
mvariocloudmap(meuse.spdf, meuse.nb, c("cadmium", "copper", "lead", "zinc", "elev"),
quantiles = 0.95, carte = meuse.riv[-c(1:20, 73:98, 156:176), ], identify = TRUE,
criteria = (meuse.spdf$lime == 1))
[Package GeoXp version 1.6.6 Index]
traceback()
# data meuse
data(meuse)
# transformation of explanatory variables
meuse[, 3:7] <- log(1 + meuse[, 3:7])
# creation of a Spatial Points object
meuse.sp <- SpatialPoints(cbind(meuse$x, meuse$y))
# creation of a SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# for the spatial contours
data(meuse.riv)
# Spatial Weight matrix based on the 7th nearest neighbours
meuse.knn <- knearneigh(meuse.sp, k = 7)
meuse.nb <- knn2nb(meuse.knn)
mvariocloudmap(meuse.spdf, meuse.nb, c("cadmium", "copper", "lead", "zinc", "elev"),
quantiles = 0.95, carte = meuse.riv[-c(1:20, 73:98, 156:176), ], identify = TRUE,
criteria = (meuse.spdf$lime == 1))
traceback()
?neighbourmap
require("rgdal")
columbus <- readOGR(system.file("shapes/columbus.shp", package="spData")[1])
# example of use of neighbourmap
neighbourmap(columbus, "CRIME", col.gal.nb,
criteria = (columbus@data$CRIME > mean(columbus@data$CRIME)))
library(GeoXp)
?mvariocloudmap
## data meuse
data(meuse)
# transformation of explanatory variables
meuse[, 3:7] <- log(1 + meuse[, 3:7])
# creation of a Spatial Points object
meuse.sp <- SpatialPoints(cbind(meuse$x, meuse$y))
# creation of a SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# for the spatial contours
data(meuse.riv)
# Spatial Weight matrix based on the 7th nearest neighbours
meuse.knn <- knearneigh(meuse.sp, k = 7)
meuse.nb <- knn2nb(meuse.knn)
# example of use of mvariocloudmap. The statistic are calculated by taking
# into account variables cadmium,copper,lead,zinc,elev
mvariocloudmap(meuse.spdf, meuse.nb, c("cadmium", "copper", "lead", "zinc", "elev"),
quantiles = 0.95, carte = meuse.riv[-c(1:20, 73:98, 156:176), ], identify = TRUE,
criteria = (meuse.spdf$lime == 1))
?misolationmap
require("robustbase")
data(radarImage)
# creation of a SpatialClass object
radarImage.sp <- SpatialPoints(radarImage[1300:1573, c("X.coord", "Y.coord")])
radarImage.spdf <- SpatialPointsDataFrame(radarImage.sp, radarImage[1300:1573,])
# creation of a spatial weight matrix nb
radarImage.nb <- dnearneigh(radarImage.sp, 0, 1.5)
# example of use of misolationmap
# The statistics are calculated by taking into account variables
# Ag,As,Bi,Cd,Co,Cu,Ni
misolationmap(radarImage.spdf, radarImage.nb, names.var = c("Band.1","Band.2","Band.3"),
propneighb = 0.30, chisqqu = 0.95, identify = TRUE, cex.lab = 0.5)
?moranplotmap
##
# data baltimore
data(baltimore)
# SpatialPoints
baltimore.sp <- SpatialPoints(cbind(baltimore$X, baltimore$Y))
# SpatialPointsDataFrame
baltimore.spdf <- SpatialPointsDataFrame(baltimore.sp, baltimore)
# Spatial Weight Matrix
W.nb <- knn2nb(knearneigh(baltimore.sp, k = 4))
# We choose a row standardized spatial weight matrix :
W.listw <- nb2listw(W.nb, style = "W")
# moranplotmap with some options
moranplotmap(baltimore.spdf, "PRICE", W.listw,
flower = TRUE, locmoran = TRUE, criteria = (baltimore.spdf$AC == 1),
identify = TRUE)
?histnbmap
##
# data columbus
require("rgdal")
columbus <- readOGR(system.file("shapes/columbus.shp", package="spData")[1])
# col.gal.nb is a spatial weight matrix included in spdep package...
col.gal.nb <- read.gal(system.file("weights/columbus.gal", package="spData")[1])
# a simple use of histnbmap
histnbmap(columbus, col.gal.nb, criteria = (columbus$CP == 1),
xlab = "distance of the neighbor the farest")
?moranplotmap
data(baltimore)
# SpatialPoints
baltimore.sp <- SpatialPoints(cbind(baltimore$X, baltimore$Y))
# SpatialPointsDataFrame
baltimore.spdf <- SpatialPointsDataFrame(baltimore.sp, baltimore)
# Spatial Weight Matrix
W.nb <- knn2nb(knearneigh(baltimore.sp, k = 4))
# We choose a row standardized spatial weight matrix :
W.listw <- nb2listw(W.nb, style = "W")
# moranplotmap with some options
moranplotmap(baltimore.spdf, "PRICE", W.listw,
flower = TRUE, locmoran = TRUE, criteria = (baltimore.spdf$AC == 1),
identify = TRUE)
?histnbmap
## Not run:
# data meuse
data(meuse)
# meuse is a data.frame object. We have to create
# a Spatial object, by using first the longitude and latitude
# to create Spatial Points object ...
meuse.sp <- SpatialPoints(cbind(meuse$x, meuse$y))
# ... and then by integrating other variables to create SpatialPointsDataFrame
meuse.spdf <- SpatialPointsDataFrame(meuse.sp, meuse)
# meuse.riv is used for contour plot
data(meuse.riv)
# creation of a spatial weight matrix (class nb) based
# on the Delaunay triangulation
meuse.nb <- tri2nb(coordinates(meuse.sp))
# a example with some optionswhich shows the limit of
# this kind of spatial weight matrix
histnbmap(meuse.spdf, meuse.nb, sup = TRUE, nbcol = 7,
carte = meuse.riv[c(21:65, 110:153), ])
CRS("+epsg=2154")
CRS("+init=epsg:2154")
01
02
localmoran
?localmoran
data(afcon, package="spData")
oid <- order(afcon$id)
resI <- localmoran(afcon$totcon, nb2listw(paper.nb))
resI
library(GeoXp)
?moranplotmap
data(baltimore)
# SpatialPoints
baltimore.sp <- SpatialPoints(cbind(baltimore$X, baltimore$Y))
# SpatialPointsDataFrame
baltimore.spdf <- SpatialPointsDataFrame(baltimore.sp, baltimore)
# Spatial Weight Matrix
W.nb <- knn2nb(knearneigh(baltimore.sp, k = 4))
# We choose a row standardized spatial weight matrix :
W.listw <- nb2listw(W.nb, style = "W")
# moranplotmap with some options
moranplotmap(baltimore.spdf, "PRICE", W.listw,
flower = TRUE, locmoran = TRUE, criteria = (baltimore.spdf$AC == 1),
identify = TRUE)
sp.obj = baltimore.spdf
name.var = "PRICE"
W.listw = listw.obj
listw.obj = W.listw
envir <- as.environment(1)
# Verification of the Spatial Object sp.obj
class.obj <- class(sp.obj)[1]
spdf <- (class.obj == "SpatialPolygonsDataFrame")
# we propose to refind the same arguments used in first version of GeoXp
long <- coordinates(sp.obj)[, 1]
lat <- coordinates(sp.obj)[, 2]
var <- sp.obj@data[, name.var]
ilocal <- spdep::localmoran(var, listw = listw.obj)[, 4]
ilocal
# i de moran local
x.centre <- (var - mean(var))
wx.centre <- (W %*% x.centre)
# We create a spatial weight matrix by using a matrix object
n <- nrow(sp.obj)
W <- matrix(0, n, n)
W.sn <- listw2sn(listw.obj)
W[as.matrix(W.sn[, 1:2])] <- W.sn[, 3]
# Is W normalized ?
is.norm <- all(apply(W, 1, sum) == rep(1, n))
W
# We create a spatial weight matrix by using a matrix object
n <- nrow(sp.obj)
W <- matrix(0, n, n)
W.sn <- listw2sn(listw.obj)
W[as.matrix(W.sn[, 1:2])] <- W.sn[, 3]
W[1, ]
# i de moran local
x.centre <- (var - mean(var))
wx.centre <- (W %*% x.centre)
ilocal <- (x.centre / var(x.centre)) * (wx.centre)
ilocal
spdep::localmoran(var, listw = listw.obj)[, 4]
ilocal <- spdep::localmoran(var, listw = listw.obj)[, 4]
moranplotmap(baltimore.spdf, "PRICE", W.listw,
flower = TRUE, locmoran = TRUE, criteria = (baltimore.spdf$AC == 1),
identify = TRUE)
# i de moran local
x.centre <- (var - mean(var))
wx.centre <- (W %*% x.centre)
ilocal <- (x.centre / var(x.centre)) * (wx.centre)
ilocal
length(spdep::localmoran(var, listw = listw.obj)[, 4])
t(spdep::localmoran(var, listw = listw.obj)[, 4])
# i de moran local
x.centre <- (var - mean(var))
wx.centre <- (W %*% x.centre)
ilocal <- (x.centre / var(x.centre)) * (wx.centre)
class(ilocal)
ilocal <- spdep::localmoran(var, listw = listw.obj)[, 4]
class(ilocal)
ilocal <- matrix(spdep::localmoran(var, listw = listw.obj)[, 4], ncol = 1)
ilocal
library(GeoXp)
?moranplotmap
data(baltimore)
# SpatialPoints
baltimore.sp <- SpatialPoints(cbind(baltimore$X, baltimore$Y))
# SpatialPointsDataFrame
baltimore.spdf <- SpatialPointsDataFrame(baltimore.sp, baltimore)
# Spatial Weight Matrix
W.nb <- knn2nb(knearneigh(baltimore.sp, k = 4))
# We choose a row standardized spatial weight matrix :
W.listw <- nb2listw(W.nb, style = "W")
# moranplotmap with some options
moranplotmap(baltimore.spdf, "PRICE", W.listw,
flower = TRUE, locmoran = TRUE, criteria = (baltimore.spdf$AC == 1),
identify = TRUE)
last.select
localmoran(baltimore.spdf$PRICE, W.listw)
